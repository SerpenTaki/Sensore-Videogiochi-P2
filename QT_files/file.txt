#ifndef AGGIUNGISENSORE_H
#define AGGIUNGISENSORE_H

#include<QDialog>
#include<QVBoxLayout>
#include<QPushButton>
#include<QLabel>
#include<QLineEdit>
#include<QApplication>
#include<QCheckBox>
#include<QRadioButton>
#include<QDebug>
#include <QSpinBox>
#include <QMessageBox>

class aggiungiSensore: public QDialog{
    Q_OBJECT
private:
    QVBoxLayout* nuovoSens;
    QRadioButton *checkBoxFisico;
    QRadioButton *checkBoxMagico;
    QRadioButton *checkBoxSacro;
    QSpinBox *DannoBase;
    QSpinBox *NumeroDiTurni;
    QPushButton* annulla;
    QWidget *dynamicWidget;
    QVBoxLayout *dynamicLayout;
public:
    QPushButton* conferma;
    QLineEdit* nomeSensoreInserimento;

    aggiungiSensore(QWidget* parent = nullptr);

    void changeUIForOption1();
    void changeUIForOption2();
    void changeUIForOption3();
    void clearDynamicWidget();

public slots:
    void onRadioButtonToggled();
    void confermaClicked();
signals:
    void sensoreAggiunto(const QString& sensoreName); 
};



#endif
#include "headers/aggiungiSensore.h"

aggiungiSensore::aggiungiSensore(QWidget* parent) : QDialog(parent) {
    setWindowTitle("Aggiungi Sensore");
    nuovoSens = new QVBoxLayout(this);
    QLabel* insNome = new QLabel("Inserisci Nome Sensore:");
    nuovoSens->addWidget(insNome);
    nomeSensoreInserimento = new QLineEdit;
    nuovoSens->addWidget(nomeSensoreInserimento);
    QLabel* selezionaTipo = new QLabel("Seleziona tipo Sensore");
    nuovoSens->addWidget(selezionaTipo);
    checkBoxFisico = new QRadioButton("Fisico");
    checkBoxMagico = new QRadioButton("Magico");
    checkBoxSacro = new QRadioButton("Sacro");
    nuovoSens->addWidget(checkBoxFisico);
    nuovoSens->addWidget(checkBoxMagico);
    nuovoSens->addWidget(checkBoxSacro);
    
    dynamicWidget = new QWidget(this);
    dynamicLayout = new QVBoxLayout(dynamicWidget);
    dynamicWidget->setLayout(dynamicLayout);
    nuovoSens->addWidget(dynamicWidget);

    connect(checkBoxFisico, &QRadioButton::toggled, this, &aggiungiSensore::onRadioButtonToggled);
    connect(checkBoxMagico, &QRadioButton::toggled, this, &aggiungiSensore::onRadioButtonToggled);
    connect(checkBoxSacro, &QRadioButton::toggled, this, &aggiungiSensore::onRadioButtonToggled);

    DannoBase = new QSpinBox();
    QLabel* DannoBaseLabel = new QLabel("Seleziona il danno base 1-100");
    nuovoSens->addWidget(DannoBaseLabel);
    DannoBase->setMinimum(1);
    DannoBase->setMaximum(100);
    DannoBase->setSingleStep(5);
    DannoBase->setValue(50);
    nuovoSens->addWidget(DannoBase);
    QLabel* NTurniLabel = new QLabel("Seleziona il numero di turni 1-30");
    nuovoSens->addWidget(NTurniLabel);
    NumeroDiTurni = new QSpinBox();
    NumeroDiTurni->setMinimum(1);
    NumeroDiTurni->setMaximum(30);
    NumeroDiTurni->setSingleStep(1);
    NumeroDiTurni->setValue(1);
    nuovoSens->addWidget(NumeroDiTurni);

    conferma = new QPushButton("Crea Sensore");
    annulla = new QPushButton("Annulla");
    nuovoSens->addWidget(conferma);
    nuovoSens->addWidget(annulla);

    connect(conferma, &QPushButton::clicked, this, &aggiungiSensore::confermaClicked); // Connetti il pulsante "Conferma"
    connect(annulla, &QPushButton::clicked, this, &aggiungiSensore::close);
}

void aggiungiSensore::confermaClicked() {
    QString nomeSensore = nomeSensoreInserimento->text();

    if (nomeSensore.isEmpty()) {
        QMessageBox::warning(this, "Dati Mancanti", "Per favore, inserisci un nome per il sensore.");
        return;
    }

    if (!checkBoxFisico->isChecked() && !checkBoxMagico->isChecked() && !checkBoxSacro->isChecked()) {
        QMessageBox::warning(this, "Tipo di Sensore Mancante", "Per favore, seleziona un tipo di sensore.");
        return;
    }
    emit sensoreAggiunto(nomeSensore);
    accept();
}


void aggiungiSensore::changeUIForOption1() {
    clearDynamicWidget();
    QLabel* labelAff = new QLabel("Seleziona percentuale affilatura");
    dynamicLayout->addWidget(labelAff);
    QSpinBox* PAffilatura = new QSpinBox();
    PAffilatura->setMinimum(1);
    PAffilatura->setMaximum(100);
    PAffilatura->setSingleStep(5);
    PAffilatura->setValue(40);
    dynamicLayout->addWidget(PAffilatura);
}

void aggiungiSensore::changeUIForOption2() {
    clearDynamicWidget();
    QLabel* labelLvMagia = new QLabel("Seleziona Livello di Magia 1-5");
    dynamicLayout->addWidget(labelLvMagia);
    QSpinBox* SLvMagia = new QSpinBox();
    SLvMagia->setMinimum(1);
    SLvMagia->setMaximum(5);
    SLvMagia->setSingleStep(1);
    SLvMagia->setValue(1);
    dynamicLayout->addWidget(SLvMagia);
    QCheckBox* StatusApp = new QCheckBox("Vuoi l'avversario in status?");
    dynamicLayout->addWidget(StatusApp);
}

void aggiungiSensore::changeUIForOption3() {
    clearDynamicWidget();
    QLabel* labelLvFede = new QLabel("Seleziona livello Fede 0-2");
    dynamicLayout->addWidget(labelLvFede);
    QSpinBox* SLvFede = new QSpinBox();
    SLvFede->setMinimum(0);
    SLvFede->setMaximum(2);
    SLvFede->setSingleStep(1);
    SLvFede->setValue(0);
    dynamicLayout->addWidget(SLvFede);
}

void aggiungiSensore::clearDynamicWidget() {
    // Rimuove tutti i widget dal layout del dynamicWidget
    QLayoutItem *child;
    while ((child = dynamicWidget->layout()->takeAt(0)) != 0) {
        delete child->widget();
        delete child;
    }
}

void aggiungiSensore::onRadioButtonToggled() {
    QRadioButton *radioButton = qobject_cast<QRadioButton *>(sender());
    if (radioButton && radioButton->isChecked()) {
        QLabel* label = new QLabel();
        label->setText("Hai selezionato: " + radioButton->text());
        clearDynamicWidget();
        if (radioButton == checkBoxFisico) {
            changeUIForOption1();
        } else if (radioButton == checkBoxMagico) {
            changeUIForOption2();
        } else if (radioButton == checkBoxSacro) {
            changeUIForOption3();
        }
    }
}
#ifndef CONTENT_H   
#define CONTENT_H

#include<QVBoxLayout>
#include<QPushButton>
#include<QLabel>
#include<QApplication>

class content: public QWidget{
private:
    QVBoxLayout* center;
    QLabel* grafichino;
    QLabel* sim;
public:
    content(QWidget* parent = nullptr);
public slots:
    void avviaSimulazione();
    void eliminaSensore();
    void aggiornaContenuto(const QString& sensoreName);
    void visualizzaSensore(const QString& sensoreName);
};


#endif
#include"headers/content.h"

content::content(QWidget* parent)
: QWidget(parent) {
    center = new QVBoxLayout(this);
    grafichino = new QLabel("Mostra qui il grafico");
    center->addWidget(grafichino);
}

void content::avviaSimulazione() {
    sim = new QLabel("Simulazione Avviata");
    center->addWidget(sim);
}

void content::eliminaSensore() {
    // Logica per eliminare i sensori
}

void content::aggiornaContenuto(const QString& sensoreName) {
    // Mostra il sensore aggiunto nel widget content
    QLabel* nuovoSensore = new QLabel("Sensore creato: " + sensoreName);
    center->addWidget(nuovoSensore);
}

void content::visualizzaSensore(const QString& sensoreName) {
    // Pulisci la visualizzazione corrente
    QLayoutItem* item;
    while ((item = layout()->takeAt(0)) != 0) {
        delete item->widget();
        delete item;
    }

    // Mostra i dettagli del sensore selezionato
    QLabel* nomeLabel = new QLabel("Nome Sensore: " + sensoreName);
    QLabel* tipoLabel = new QLabel("Tipo:");
    
    layout()->addWidget(nomeLabel);
    layout()->addWidget(tipoLabel);
    setLayout(layout());
}
#ifndef LEFTSIDEBAR_H
#define LEFTSIDEBAR_H

#include<QVBoxLayout>
#include<QPushButton>
#include<QLabel>
#include<QLineEdit>
#include<QApplication>
#include<QDebug>
#include <QListWidget>

#include"aggiungiSensore.h"

class leftSideBar: public QWidget{
    Q_OBJECT
private:
    QVBoxLayout* left;
    QPushButton* aggiungiSensoreBottone;
    QLineEdit* searchBox;
    QListWidget* sensoreList;
    QStringList sensori; 
public:
    leftSideBar(QWidget* parent = nullptr);

public slots:
    void stampaSelSensore();
    void eseguiRicerca(const QString& text);
    void aggiungiSensoreToList(const QString& sensoreName);
signals:
    void sensoreSelezionato(const QString& sensoreName);
};


#endif
#include "headers/leftSideBar.h"

leftSideBar::leftSideBar(QWidget* parent)
: QWidget(parent) {
    left = new QVBoxLayout(this);
    aggiungiSensoreBottone = new QPushButton("Aggiungi Sensore");
    searchBox = new QLineEdit();
    searchBox->setPlaceholderText("Cerca sensore...");
    sensoreList = new QListWidget(); // Inizializza la lista dei sensori

    left->addWidget(searchBox);
    left->addWidget(aggiungiSensoreBottone);
    left->addWidget(sensoreList); // Aggiungi la lista al layout

    connect(aggiungiSensoreBottone, &QPushButton::clicked, this, &leftSideBar::stampaSelSensore);
    connect(searchBox, &QLineEdit::textChanged, this, &leftSideBar::eseguiRicerca);
    connect(sensoreList, &QListWidget::itemClicked, [=](QListWidgetItem* item) {
        emit sensoreSelezionato(item->text());
    });
}
/*
void leftSideBar::stampaSelSensore() {
    aggiungiSensore* dialog = new aggiungiSensore(this);
    connect(dialog->conferma, &QPushButton::clicked, [=]() {
        QString nomeSensore = dialog->nomeSensoreInserimento->text();
        aggiungiSensoreToList(nomeSensore);
        emit sensoreAggiunto(nomeSensore); // Emetti il segnale quando un sensore Ã¨ aggiunto
        dialog->accept(); // Chiudi il dialogo
    });
    dialog->exec(); // Mostra il dialogo
}*/

void leftSideBar::stampaSelSensore() {
    // Crea e mostra la finestra di dialogo per aggiungere un sensore
    aggiungiSensore* dialog = new aggiungiSensore(this);
    
    // Connetti il segnale del dialogo per aggiungere sensore
    connect(dialog, &aggiungiSensore::sensoreAggiunto, this, &leftSideBar::aggiungiSensoreToList);
    
    dialog->exec(); // Mostra il dialogo come modale
}

void leftSideBar::aggiungiSensoreToList(const QString& sensoreName) {
    sensoreList->addItem(sensoreName);
    sensori.append(sensoreName); // Aggiungi il sensore alla lista per la ricerca
}

void leftSideBar::eseguiRicerca(const QString& text) {
    for (int i = 0; i < sensoreList->count(); ++i) {
        QListWidgetItem* item = sensoreList->item(i);
        item->setHidden(!item->text().contains(text, Qt::CaseInsensitive));
    }
}
#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include "leftSideBar.h"
#include "content.h"
#include "rightSideBar.h"
#include <QSplitter>

class MainW: public QWidget{
private:
  QHBoxLayout* mainWindow;
  QSplitter* splitter;
  leftSideBar* leftSideBarWidget;
  content* contentWidget;
  rightSideBar* rightSideBarWidget;
public:
    MainW(QWidget* parent = nullptr);
};


#endif
#include"headers/mainWindow.h"

MainW::MainW(QWidget* parent)
:QWidget(parent){
        setWindowTitle("Sensore Danni Gioco");
        mainWindow = new QHBoxLayout(this);
        
        splitter = new QSplitter(Qt::Horizontal, this);

        leftSideBarWidget = new leftSideBar(this);
        contentWidget = new content(this);
        rightSideBarWidget = new rightSideBar(contentWidget, this);

        splitter->addWidget(leftSideBarWidget);
        splitter->addWidget(contentWidget);
        splitter->addWidget(rightSideBarWidget);

        mainWindow->addWidget(splitter);

        setLayout(mainWindow);

        connect(leftSideBarWidget, &leftSideBar::sensoreSelezionato,contentWidget, &content::visualizzaSensore);
}

#ifndef RIGHTSIDEBAR_H
#define RIGHTSIDEBAR_H

#include<QVBoxLayout>
#include<QPushButton>
#include<QLabel>
#include<QLineEdit>
#include<QApplication>

#include"content.h"

class rightSideBar: public QWidget{
private:
    QVBoxLayout* right;
    QPushButton* avviaSimulaButt;
    QPushButton* modificaSensButt;
    QPushButton* eliminaSensButt;
    content* cont;
public:
    rightSideBar(content* c,QWidget* parent = nullptr);
public slots:
    void modificaSensore();
};

#endif
#include"headers/rightSideBar.h"

rightSideBar::rightSideBar(content* c,QWidget* parent)
: QWidget(parent), cont(c){
    right = new QVBoxLayout(this);
    avviaSimulaButt = new QPushButton("Avvia Simulazione");
    modificaSensButt = new QPushButton("Modifica Sensore");
    eliminaSensButt = new QPushButton("Elimina Sensore");
    right->addWidget(avviaSimulaButt);
    right->addWidget(modificaSensButt);
    right->addWidget(eliminaSensButt);

    if (cont) {
        connect(avviaSimulaButt, &QPushButton::clicked, cont, &content::avviaSimulazione);
        connect(eliminaSensButt, &QPushButton::clicked, cont, &content::eliminaSensore);
    }
        
    connect(modificaSensButt, &QPushButton::clicked, this, &rightSideBar::modificaSensore);
}

void rightSideBar::modificaSensore(){
    QLabel* testoModifica = new QLabel("Modifica Sensore");
    testoModifica->show();
}