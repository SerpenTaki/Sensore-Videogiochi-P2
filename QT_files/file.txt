#include <QDialog>
#include <QVBoxLayout>
#include <QPushButton>
#include <QLabel>
#include <QLineEdit>
#include <QCheckBox>
#include <QRadioButton>
#include <QSpinBox>
#include <QMessageBox>
#include <QApplication>
#include <QListWidget>
#include <QFileDialog>
#include <QJsonDocument>
#include <QJsonObject>
#include <QJsonArray>
#include <QFile>
#include <QTextStream>
#include <QXmlStreamWriter>
#include <QSplitter>
#include <QWidget>
#include <QtCharts/QChartView>
#include <QtCharts/QLineSeries>
#include <QtCharts/QChart>


//Core_files
#include "core_files/headers/sensoreDanno.h"
#include "core_files/headers/contentvisitor.h"
#include"core_files/headers/visitor.h"
#include"core_files/headers/fisico.h"
#include"core_files/headers/magico.h"
#include"core_files/headers/sacro.h"
#ifndef RIGHTSIDEBAR_H
#define RIGHTSIDEBAR_H

#include "viewlib.h"
#include "content.h"
#include "leftSideBar.h"
#include <QWidget>
#include <QVBoxLayout>
#include <QPushButton>

class rightSideBar : public QWidget {
    Q_OBJECT
private:
    QVBoxLayout* right;
    QPushButton* avviaSimulaButt;
    QPushButton* modificaSensButt;
    QPushButton* eliminaSensButt;
    content* cont;
    leftSideBar* leftSide;
public:
    explicit rightSideBar(content* c, leftSideBar* l, QWidget* parent = nullptr);

public slots:
    void modificaSensore();
    void eliminaSensore();
    void avviaSimulazione();  // Nuovo slot per avviare la simulazione e mostrare il grafico
};

#endif
#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include "viewlib.h"
#include "leftSideBar.h"
#include "content.h"
#include "rightSideBar.h"

class MainW : public QWidget {
private:
    QHBoxLayout* mainWindow;
    QSplitter* splitter;
    leftSideBar* leftSideBarWidget;
    content* contentWidget;
    rightSideBar* rightSideBarWidget;

public:
    explicit MainW(QWidget* parent = nullptr);
};

#endif
#ifndef LEFTSIDEBAR_H
#define LEFTSIDEBAR_H

#include "viewlib.h"
#include"aggiungiSensore.h"

class leftSideBar : public QWidget {
    Q_OBJECT
private:
    QVBoxLayout* left;
    QPushButton* aggiungiSensoreBottone;
    QPushButton* salvaSensoriBottone; // Pulsante per XML
    QPushButton* salvaJsonBottone; // Nuovo pulsante per JSON
    QLineEdit* searchBox;
    QListWidget* sensoreList;
    QStringList sensori;
public:
    leftSideBar(QWidget* parent = nullptr);

public slots:
    void stampaSelSensore();
    void eseguiRicerca(const QString& text);
    void aggiungiSensoreToList(const QString& sensoreName);
    void eliminaSensore(const QString& sensoreName);
    void salvaSensori(); // Funzione per salvare in XML
    void salvaSensoriJson(); // Funzione per salvare in JSON
signals:
    void sensoreSelezionato(const QString& sensoreName);
};

#endif // LEFTSIDEBAR_H
#ifndef CONTENT_H
#define CONTENT_H

#include "viewlib.h"
#include <QWidget>
#include <QVBoxLayout>
#include <QLabel>
#include <QVector>
#include <QPointF>
#include "core_files/headers/sensoreDanno.h" 

class content : public QWidget {
    Q_OBJECT
private:
    QVBoxLayout* center;
    QLabel* grafichino;
    QLabel* sim;
    QString selectedSensore;
    sensoreDanno* sensore; 

public:
    explicit content(QWidget* parent = nullptr);
    void eliminaSensore(const QString& sensoreName);
    QString getSelectedSensore() const;
    void mostraGrafico(const QVector<QPointF>& data);

public slots:
    void aggiungiSensoreAlContenuto(sensoreDanno* nuovoSensore);
    void mostraGraficoSensore(); 
};

#endif
#ifndef AGGIUNGISENSORE_H
#define AGGIUNGISENSORE_H

#include"viewlib.h"

class aggiungiSensore : public QDialog {
    Q_OBJECT
private:
    QVBoxLayout* nuovoSens;
    QRadioButton *checkBoxFisico;
    QRadioButton *checkBoxMagico;
    QRadioButton *checkBoxSacro;
    QSpinBox *DannoBase;
    QSpinBox *NumeroDiTurni;
    QSpinBox *AttPerTurno;
    QPushButton* annulla;
    QWidget *dynamicWidget;
    QVBoxLayout *dynamicLayout;
    QCheckBox* StatusApp;
    QSpinBox* PAffilatura;
    QSpinBox* SLvMagia;
    QSpinBox* SLvFede;
public:
    QPushButton* conferma;
    QLineEdit* nomeSensoreInserimento;

    aggiungiSensore(QWidget* parent = nullptr);

    void changeUIForOption1();  // Fisico
    void changeUIForOption2();  // Magico
    void changeUIForOption3();  // Sacro
    void clearDynamicWidget();

public slots:
    void onRadioButtonToggled();
    void confermaClicked();
signals:
    void sensoreAggiunto(const QString& sensoreName);
    void sensoreAggiuntoStats(sensoreDanno* nuovoSensore);
};

#endif // AGGIUNGISENSORE_H
#include "headers/aggiungiSensore.h"

aggiungiSensore::aggiungiSensore(QWidget* parent) : QDialog(parent) {
    setWindowTitle("Aggiungi Sensore");
    nuovoSens = new QVBoxLayout(this);

    QLabel* insNome = new QLabel("Inserisci Nome Sensore:");
    nuovoSens->addWidget(insNome);
    nomeSensoreInserimento = new QLineEdit;
    nuovoSens->addWidget(nomeSensoreInserimento);

    QLabel* selezionaTipo = new QLabel("Seleziona tipo Sensore");
    nuovoSens->addWidget(selezionaTipo);

    checkBoxFisico = new QRadioButton("Fisico");
    checkBoxMagico = new QRadioButton("Magico");
    checkBoxSacro = new QRadioButton("Sacro");

    nuovoSens->addWidget(checkBoxFisico);
    nuovoSens->addWidget(checkBoxMagico);
    nuovoSens->addWidget(checkBoxSacro);

    dynamicWidget = new QWidget(this);
    dynamicLayout = new QVBoxLayout(dynamicWidget);
    dynamicWidget->setLayout(dynamicLayout);
    nuovoSens->addWidget(dynamicWidget);

    connect(checkBoxFisico, &QRadioButton::toggled, this, &aggiungiSensore::onRadioButtonToggled);
    connect(checkBoxMagico, &QRadioButton::toggled, this, &aggiungiSensore::onRadioButtonToggled);
    connect(checkBoxSacro, &QRadioButton::toggled, this, &aggiungiSensore::onRadioButtonToggled);

    DannoBase = new QSpinBox();
    QLabel* DannoBaseLabel = new QLabel("Seleziona il danno base 1-100");
    nuovoSens->addWidget(DannoBaseLabel);
    DannoBase->setMinimum(1);
    DannoBase->setMaximum(100);
    DannoBase->setSingleStep(5);
    DannoBase->setValue(50);
    nuovoSens->addWidget(DannoBase);

    QLabel* NTurniLabel = new QLabel("Seleziona il numero di turni 1-30");
    nuovoSens->addWidget(NTurniLabel);
    NumeroDiTurni = new QSpinBox();
    NumeroDiTurni->setMinimum(1);
    NumeroDiTurni->setMaximum(30);
    NumeroDiTurni->setSingleStep(1);
    NumeroDiTurni->setValue(1);
    nuovoSens->addWidget(NumeroDiTurni);

    QLabel* AttacchiLabel = new QLabel("Seleziona il numero di attacchi per turno 1-5");
    nuovoSens->addWidget(AttacchiLabel);
    AttPerTurno = new QSpinBox();
    AttPerTurno->setMinimum(1);
    AttPerTurno->setMaximum(5);
    AttPerTurno->setSingleStep(1);
    AttPerTurno->setValue(1);
    nuovoSens->addWidget(AttPerTurno);
    conferma = new QPushButton("Crea Sensore");
    annulla = new QPushButton("Annulla");
    nuovoSens->addWidget(conferma);
    nuovoSens->addWidget(annulla);

    connect(conferma, &QPushButton::clicked, this, &aggiungiSensore::confermaClicked);
    connect(annulla, &QPushButton::clicked, this, &QDialog::reject);
}

void aggiungiSensore::changeUIForOption1() { // Fisico
    clearDynamicWidget();
    QLabel* labelAff = new QLabel("Seleziona percentuale affilatura");
    dynamicLayout->addWidget(labelAff);
    PAffilatura = new QSpinBox();
    PAffilatura->setMinimum(1);
    PAffilatura->setMaximum(100);
    PAffilatura->setSingleStep(5);
    PAffilatura->setValue(40);
    dynamicLayout->addWidget(PAffilatura);
}

void aggiungiSensore::changeUIForOption2() { // Magico
    clearDynamicWidget();
    QLabel* labelLvMagia = new QLabel("Seleziona Livello di Magia 1-5");
    dynamicLayout->addWidget(labelLvMagia);
    SLvMagia = new QSpinBox();
    SLvMagia->setMinimum(1);
    SLvMagia->setMaximum(5);
    SLvMagia->setSingleStep(1);
    SLvMagia->setValue(1);
    dynamicLayout->addWidget(SLvMagia);
    StatusApp = new QCheckBox("Vuoi l'avversario in status?");
    dynamicLayout->addWidget(StatusApp);
}

void aggiungiSensore::changeUIForOption3() { // Sacro
    clearDynamicWidget();
    QLabel* labelLvFede = new QLabel("Seleziona livello Fede 0-2");
    dynamicLayout->addWidget(labelLvFede);
    SLvFede = new QSpinBox();
    SLvFede->setMinimum(0);
    SLvFede->setMaximum(2);
    SLvFede->setSingleStep(1);
    SLvFede->setValue(0);
    dynamicLayout->addWidget(SLvFede);
}

void aggiungiSensore::clearDynamicWidget() {
    // Rimuove tutti i widget dal layout del dynamicWidget
    QLayoutItem *child;
    while ((child = dynamicWidget->layout()->takeAt(0)) != nullptr) {
        delete child->widget();
        delete child;
    }
}

void aggiungiSensore::onRadioButtonToggled() {
    QRadioButton *radioButton = qobject_cast<QRadioButton *>(sender());
    if (radioButton && radioButton->isChecked()) {
        clearDynamicWidget();
        if (radioButton == checkBoxFisico) {
            changeUIForOption1();
        } else if (radioButton == checkBoxMagico) {
            changeUIForOption2();
        } else if (radioButton == checkBoxSacro) {
            changeUIForOption3();
        }
    }
}

void aggiungiSensore::confermaClicked() {
    QString nomeSensoreQString = nomeSensoreInserimento->text();
    std::string nomeSensore = nomeSensoreQString.toStdString(); // Converti QString in std::string

    sensoreDanno* sensore = nullptr;

    if (checkBoxFisico->isChecked()) {
        if (PAffilatura) {
            sensore = new fisico(nomeSensore, DannoBase->value(), NumeroDiTurni->value(), AttPerTurno->value(), PAffilatura->value());
        } else {
            QMessageBox::warning(this, "Errore", "Valore di affilatura non impostato.");
            return;
        }
    } else if (checkBoxMagico->isChecked()) {
        if (SLvMagia) {
            sensore = new magico(nomeSensore, DannoBase->value(), NumeroDiTurni->value(), AttPerTurno->value(), SLvMagia->value(), StatusApp ? StatusApp->isChecked() : false);
        } else {
            QMessageBox::warning(this, "Errore", "Valore di magia non impostato.");
            return;
        }
    } else if (checkBoxSacro->isChecked()) {
        if (SLvFede) {
            sensore = new sacro(nomeSensore, DannoBase->value(), NumeroDiTurni->value(), AttPerTurno->value(), SLvFede->value());
        } else {
            QMessageBox::warning(this, "Errore", "Valore di fede non impostato.");
            return;
        }
    }

    if (nomeSensoreQString.isEmpty()) {
        QMessageBox::warning(this, "Dati Mancanti", "Per favore, inserisci un nome per il sensore.");
        return;
    }

    if (!checkBoxFisico->isChecked() && !checkBoxMagico->isChecked() && !checkBoxSacro->isChecked()) {
        QMessageBox::warning(this, "Tipo di Sensore Mancante", "Per favore, seleziona un tipo di sensore.");
        return;
    }

    if (sensore) {
        emit sensoreAggiunto(nomeSensoreQString);
        emit sensoreAggiuntoStats(sensore);
        accept(); // Chiudi il dialogo
    } else {
        QMessageBox::warning(this, "Errore", "Impossibile creare il sensore.");
    }
}
#include "headers/content.h"
#include <QtCharts/QChartView>
#include <QtCharts/QLineSeries>
#include <QtCharts/QChart>

content::content(QWidget* parent)
    : QWidget(parent), selectedSensore(""), sensore(nullptr) {
    center = new QVBoxLayout(this);
    grafichino = new QLabel("Mostra qui il grafico", this);
    center->addWidget(grafichino);
}

void content::eliminaSensore(const QString& sensoreName) {
    if (sensore && sensore->getNome() == sensoreName.toStdString()) {
        delete sensore;  // Chiama il distruttore del sensore
        sensore = nullptr;
        selectedSensore.clear();
        // Aggiungi qui codice per aggiornare l'interfaccia se necessario
        grafichino->clear();
        sim->clear();
    }
}


QString content::getSelectedSensore() const {
    return selectedSensore;
}

void content::aggiungiSensoreAlContenuto(sensoreDanno* nuovoSensore) {
    if (!nuovoSensore) {
        return;
    }

    QLabel* nuovoSensoreLabel = new QLabel("Sensore creato: " + QString::fromStdString(nuovoSensore->getNome()), this);
    center->addWidget(nuovoSensoreLabel);

    ContentVisitor* visitor = new ContentVisitor();
    nuovoSensore->accept(visitor);

    QWidget* visitorWidget = visitor->returnQWidget();
    if (visitorWidget) {
        center->addWidget(visitorWidget);
    }

    selectedSensore = QString::fromStdString(nuovoSensore->getNome());
    sensore = nuovoSensore; 
}

void content::mostraGrafico(const QVector<QPointF>& data) {
    QLayoutItem* item;
    while ((item = center->takeAt(0)) != nullptr) {
        delete item->widget();
        delete item;
    }

    QLineSeries *series = new QLineSeries();
    for (const QPointF &point : data) {
        series->append(point);
    }

    QChart *chart = new QChart();
    chart->legend()->hide();
    chart->addSeries(series);
    chart->createDefaultAxes();
    chart->setTitle("Danno per Turno");

    QChartView *chartView = new QChartView(chart);
    chartView->setRenderHint(QPainter::Antialiasing);

    center->addWidget(chartView);
}

void content::mostraGraficoSensore() {
    if (!sensore) {
        return; 
    }

    vector<double> valoriGrafico = sensore->getValoriGrafico();
    QVector<QPointF> puntiGrafico;

    for (size_t i = 0; i < valoriGrafico.size(); ++i) {
        puntiGrafico.append(QPointF(static_cast<qreal>(i), static_cast<qreal>(valoriGrafico[i])));
    }

    mostraGrafico(puntiGrafico);
}
#include "headers/leftSideBar.h"

leftSideBar::leftSideBar(QWidget* parent)
    : QWidget(parent) {
    left = new QVBoxLayout(this);

    aggiungiSensoreBottone = new QPushButton("Aggiungi Sensore");
    searchBox = new QLineEdit();
    searchBox->setPlaceholderText("Cerca sensore...");
    sensoreList = new QListWidget(); // Inizializza la lista dei sensori
    salvaSensoriBottone = new QPushButton("Salva Sensori");
    salvaJsonBottone = new QPushButton("Salva in JSON"); // Nuovo pulsante

    left->addWidget(searchBox);
    left->addWidget(aggiungiSensoreBottone);
    left->addWidget(sensoreList); // Aggiungi la lista al layout
    left->addWidget(salvaSensoriBottone); // Aggiungi il pulsante "Salva Sensori"
    left->addWidget(salvaJsonBottone); // Aggiungi il pulsante "Salva in JSON"

    connect(aggiungiSensoreBottone, &QPushButton::clicked, this, &leftSideBar::stampaSelSensore);
    connect(searchBox, &QLineEdit::textChanged, this, &leftSideBar::eseguiRicerca);
    connect(sensoreList, &QListWidget::itemClicked, [=](QListWidgetItem* item) {
        emit sensoreSelezionato(item->text());
    });
    connect(salvaSensoriBottone, &QPushButton::clicked, this, &leftSideBar::salvaSensori); // Connetti il pulsante "Salva Sensori"
    connect(salvaJsonBottone, &QPushButton::clicked, this, &leftSideBar::salvaSensoriJson); // Connetti il pulsante "Salva in JSON"
}

void leftSideBar::stampaSelSensore() {
    aggiungiSensore* dialog = new aggiungiSensore(this);

    connect(dialog, &aggiungiSensore::sensoreAggiunto, this, &leftSideBar::aggiungiSensoreToList);

    dialog->exec(); // Mostra il dialogo come modale
}

void leftSideBar::aggiungiSensoreToList(const QString& sensoreName) {
    sensoreList->addItem(sensoreName);
    sensori.append(sensoreName); // Aggiungi il sensore alla lista per la ricerca
}

void leftSideBar::eseguiRicerca(const QString& text) {
    for (int i = 0; i < sensoreList->count(); ++i) {
        QListWidgetItem* item = sensoreList->item(i);
        item->setHidden(!item->text().contains(text, Qt::CaseInsensitive));
    }
}

void leftSideBar::eliminaSensore(const QString& sensoreName) {
    QList<QListWidgetItem*> items = sensoreList->findItems(sensoreName, Qt::MatchExactly);
    if (!items.empty()) {
        delete items.first();  // Rimuovi l'elemento dalla QListWidget
        sensori.removeAll(sensoreName);  // Rimuovi il sensore dalla QStringList
    }
}


void leftSideBar::salvaSensori() {
    QString fileName = QFileDialog::getSaveFileName(this, "Salva Sensori", "", "XML Files (*.xml)");
    if (fileName.isEmpty()) return;

    QFile file(fileName);
    if (!file.open(QIODevice::WriteOnly)) {
        QMessageBox::warning(this, "Errore", "Non è stato possibile salvare il file.");
        return;
    }

    QXmlStreamWriter xmlWriter(&file);
    xmlWriter.setAutoFormatting(true);
    xmlWriter.writeStartDocument();
    xmlWriter.writeStartElement("Sensori");

    for (const QString& sensoreName : sensori) {
        xmlWriter.writeStartElement("Sensore");
        xmlWriter.writeTextElement("Nome", sensoreName);
        xmlWriter.writeEndElement();
    }

    xmlWriter.writeEndElement();
    xmlWriter.writeEndDocument();

    file.close();
}

void leftSideBar::salvaSensoriJson() {
    QJsonArray sensoriArray;
    for (const QString& sensoreName : sensori) {
        QJsonObject sensoreObject;
        sensoreObject["nome"] = sensoreName;
        sensoriArray.append(sensoreObject);
    }

    QJsonObject root;
    root["Sensori"] = sensoriArray;

    QJsonDocument doc(root);

    QString fileName = QFileDialog::getSaveFileName(this, "Salva Sensori in JSON", "", "JSON Files (*.json)");
    if (fileName.isEmpty()) return;

    QFile file(fileName);
    if (!file.open(QIODevice::WriteOnly)) {
        QMessageBox::warning(this, "Errore", "Non è stato possibile salvare il file.");
        return;
    }

    QTextStream stream(&file);
    stream << doc.toJson(QJsonDocument::Indented); // Indenta con spazi
    file.close();
}
#include "headers/mainWindow.h"

MainW::MainW(QWidget* parent)
    : QWidget(parent) {
    setWindowTitle("Sensore Danni Gioco");

    mainWindow = new QHBoxLayout(this);
    splitter = new QSplitter(Qt::Horizontal, this);

    leftSideBarWidget = new leftSideBar(this);
    contentWidget = new content(this);
    rightSideBarWidget = new rightSideBar(contentWidget, leftSideBarWidget, this); // Passa leftSideBarWidget

    splitter->addWidget(leftSideBarWidget);
    splitter->addWidget(contentWidget);
    splitter->addWidget(rightSideBarWidget);

    mainWindow->addWidget(splitter);
    setLayout(mainWindow);

    connect(leftSideBarWidget, &leftSideBar::sensoreSelezionato, contentWidget, &content::eliminaSensore);

    aggiungiSensore* dialog = new aggiungiSensore(this);
    connect(dialog, &aggiungiSensore::sensoreAggiuntoStats, contentWidget, &content::aggiungiSensoreAlContenuto);
}
#include "headers/rightSideBar.h"

rightSideBar::rightSideBar(content* c, leftSideBar* l, QWidget* parent)
    : QWidget(parent), cont(c), leftSide(l) {
    right = new QVBoxLayout(this);
    avviaSimulaButt = new QPushButton("Avvia Simulazione", this);
    modificaSensButt = new QPushButton("Modifica Sensore", this);
    eliminaSensButt = new QPushButton("Elimina Sensore", this);
    right->addWidget(avviaSimulaButt);
    right->addWidget(modificaSensButt);
    right->addWidget(eliminaSensButt);

    connect(avviaSimulaButt, &QPushButton::clicked, this, &rightSideBar::avviaSimulazione);
    connect(modificaSensButt, &QPushButton::clicked, this, &rightSideBar::modificaSensore);
    connect(eliminaSensButt, &QPushButton::clicked, this, &rightSideBar::eliminaSensore);
}

void rightSideBar::modificaSensore() {
    QLabel* testoModifica = new QLabel("Modifica Sensore");
    testoModifica->show();
}

void rightSideBar::eliminaSensore() {
    QString sensoreName = cont->getSelectedSensore();
    if (!sensoreName.isEmpty()) {
        // Chiedi conferma all'utente
        QMessageBox::StandardButton reply;
        reply = QMessageBox::question(this, "Eliminazione Sensore", 
                                      "Sei sicuro di voler eliminare il sensore " + sensoreName + "?",
                                      QMessageBox::Yes|QMessageBox::No);
        if (reply == QMessageBox::Yes) {
            // Elimina il sensore dal contenuto
            cont->eliminaSensore(sensoreName);
            // Rimuovi il sensore dalla lista di sinistra
            leftSide->eliminaSensore(sensoreName);
        }
    } else {
        QMessageBox::warning(this, "Errore", "Nessun sensore selezionato per l'eliminazione.");
    }
}


void rightSideBar::avviaSimulazione() {
    cont->mostraGraficoSensore();
}
